#!/usr/bin/env python3
"""
WeaveAI Environment Setup Script
Interactive script to create .env file with user's configuration
"""

import os

def create_env_file():
    """Interactive setup for .env file"""
    print("üöÄ WeaveAI Environment Setup")
    print("=" * 40)
    print("This script will help you create a .env file with your configuration.")
    print()
    
    # Collect configuration
    config = {}
    
    print("üìù OpenAI Configuration (Required)")
    print("-" * 30)
    
    config['OPENAI_API_BASE'] = input("Enter your OpenAI API Base URL: ").strip()
    if not config['OPENAI_API_BASE']:
        config['OPENAI_API_BASE'] = "https://your-azure-openai-endpoint.openai.azure.com"
    
    config['OPENAI_API_KEY'] = input("Enter your OpenAI API Key: ").strip()
    if not config['OPENAI_API_KEY']:
        config['OPENAI_API_KEY'] = "your-api-key-here"
    
    config['OPENAI_API_VERSION'] = input("Enter API Version (default: 2023-12-01-preview): ").strip()
    if not config['OPENAI_API_VERSION']:
        config['OPENAI_API_VERSION'] = "2023-12-01-preview"
    
    config['OPENAI_DEPLOYMENT_NAME'] = input("Enter Deployment Name (default: gpt-4): ").strip()
    if not config['OPENAI_DEPLOYMENT_NAME']:
        config['OPENAI_DEPLOYMENT_NAME'] = "gpt-4"
    
    print("\n‚öôÔ∏è  Optional Configuration")
    print("-" * 30)
    print("Press Enter to use defaults for the following:")
    
    config['CHROMA_PERSIST_DIRECTORY'] = input("ChromaDB directory (default: ./chroma_db): ").strip() or "./chroma_db"
    config['EMBEDDING_MODEL'] = input("Embedding model (default: all-MiniLM-L6-v2): ").strip() or "all-MiniLM-L6-v2"
    config['MAX_FILE_SIZE_MB'] = input("Max file size MB (default: 50): ").strip() or "50"
    config['CHUNK_SIZE'] = input("Chunk size (default: 1000): ").strip() or "1000"
    config['CHUNK_OVERLAP'] = input("Chunk overlap (default: 200): ").strip() or "200"
    config['TOP_K_DOCUMENTS'] = input("Top K documents (default: 5): ").strip() or "5"
    config['CONFIDENCE_THRESHOLD'] = input("Confidence threshold (default: 0.7): ").strip() or "0.7"
    config['HOST'] = input("Server host (default: 0.0.0.0): ").strip() or "0.0.0.0"
    config['PORT'] = input("Server port (default: 8000): ").strip() or "8000"
    config['UPLOAD_DIRECTORY'] = input("Upload directory (default: ./uploads): ").strip() or "./uploads"
    
    # Create .env content
    env_content = "# WeaveAI Configuration\n"
    env_content += "# Generated by setup_env.py\n\n"
    
    env_content += "# OpenAI Configuration\n"
    env_content += f"OPENAI_API_BASE={config['OPENAI_API_BASE']}\n"
    env_content += f"OPENAI_API_KEY={config['OPENAI_API_KEY']}\n"
    env_content += f"OPENAI_API_VERSION={config['OPENAI_API_VERSION']}\n"
    env_content += f"OPENAI_DEPLOYMENT_NAME={config['OPENAI_DEPLOYMENT_NAME']}\n\n"
    
    env_content += "# Vector Database Configuration\n"
    env_content += f"CHROMA_PERSIST_DIRECTORY={config['CHROMA_PERSIST_DIRECTORY']}\n"
    env_content += f"EMBEDDING_MODEL={config['EMBEDDING_MODEL']}\n\n"
    
    env_content += "# Document Processing\n"
    env_content += f"MAX_FILE_SIZE_MB={config['MAX_FILE_SIZE_MB']}\n"
    env_content += f"CHUNK_SIZE={config['CHUNK_SIZE']}\n"
    env_content += f"CHUNK_OVERLAP={config['CHUNK_OVERLAP']}\n\n"
    
    env_content += "# RAG Configuration\n"
    env_content += f"TOP_K_DOCUMENTS={config['TOP_K_DOCUMENTS']}\n"
    env_content += f"CONFIDENCE_THRESHOLD={config['CONFIDENCE_THRESHOLD']}\n\n"
    
    env_content += "# Server Configuration\n"
    env_content += f"HOST={config['HOST']}\n"
    env_content += f"PORT={config['PORT']}\n\n"
    
    env_content += "# Upload Configuration\n"
    env_content += f"UPLOAD_DIRECTORY={config['UPLOAD_DIRECTORY']}\n"
    
    # Write .env file
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print("\n‚úÖ .env file created successfully!")
        print("üìÅ Location: ./.env")
        print("\nüöÄ You can now run WeaveAI:")
        print("   python main.py")
        
    except Exception as e:
        print(f"\n‚ùå Error creating .env file: {e}")
        print("\nüìã Here's your configuration to copy manually:")
        print("=" * 50)
        print(env_content)
        print("=" * 50)
        print("Copy the above content to a file named '.env' in the project directory.")

def check_existing_env():
    """Check if .env already exists"""
    if os.path.exists('.env'):
        print("‚ö†Ô∏è  .env file already exists!")
        response = input("Do you want to overwrite it? (y/N): ").strip().lower()
        return response in ['y', 'yes']
    return True

if __name__ == "__main__":
    print("WeaveAI Environment Setup")
    print("Make sure you're in the WeaveAI project directory.")
    print()
    
    if check_existing_env():
        create_env_file()
    else:
        print("Setup cancelled. Existing .env file preserved.") 